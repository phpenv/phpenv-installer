#!/usr/bin/env bash

set -e
[ -n "$PHPENV_DEBUG" ] && set -x

if [ -z "$PHPENV_ROOT" ]; then
  PHPENV_ROOT="${HOME}/.phpenv"
fi

shell="$1"
if [ -z "$shell" ]; then
  shell="$(ps c -p "$PPID" -o 'ucomm=' 2>/dev/null || true)"
  shell="${shell##-}"
  shell="${shell%% *}"
  shell="$(basename "${shell:-$SHELL}")"
fi

indent() {
  sed 's/^/  /'
}

printc() {
  local color_name="color_$1"
  local msg="$2"
  printf "%s%s%s" "${!color_name}" "$msg" "$color_reset"
}

if [ -t 1 ]; then
  # shellcheck disable=SC2034
  color_red=$'\e[31m'
  # shellcheck disable=SC2034
  color_green=$'\e[32m'
  # shellcheck disable=SC2034
  color_yellow=$'\e[1;33m'
  # shellcheck disable=SC2034
  color_bright=$'\e[1;37m'
  color_reset=$'\e[0m'
else
  # shellcheck disable=SC2034
  color_red=""
  # shellcheck disable=SC2034
  color_green=""
  # shellcheck disable=SC2034
  color_yellow=""
  # shellcheck disable=SC2034
  color_bright=""
  color_reset=""
fi

warnings=0

# check for phpenv in PATH
echo -n "Checking for \`phpenv' in PATH: "
num_locations="$(which -a phpenv | uniq | wc -l)"
if [ "$num_locations" -eq 0 ]; then
  printc red "not found"
  
  echo
  { if [ -x "$PHPENV_ROOT/bin/phpenv" ]; then
      echo "You seem to have phpenv installed in \`$PHPENV_ROOT/bin', but that"
      echo "directory is not present in PATH. Please add it to PATH by configuring"
      echo "your shell initialization files."
    else
      echo "Please refer to https://github.com/phpenv/phpenv#installation"
    fi
  } | indent
  exit 1
elif [ "$num_locations" -eq 1 ]; then
  printc green "$(command -v phpenv)"
  echo
else
  printc yellow "multiple"
  echo
  { echo "You seem to have multiple phpenv installs in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    which -a phpenv
  } | indent
  echo
  : $((warnings++))
fi

# check for phpenv shims in PATH
echo -n "Checking for phpenv shims in PATH: "
shims_dir="${PHPENV_ROOT}/shims"
found=""
IFS=: read -r -a path <<<"$PATH" || true
for dir in "${path[@]}"; do
  if [ "$dir" = "$shims_dir" ]; then
    found=true
  elif [ -x "$dir"/php ] && [ -z "$found" ]; then
    precedence_problem="$dir"
  fi
done
if [ -n "$found" ]; then
  if [ -n "$precedence_problem" ]; then
    printc yellow "found at wrong position"
    echo
    { echo "The directory \`$shims_dir' is present in PATH, but is listed too late."
      echo "The PHP version found in \`$precedence_problem' will have precedence. Please reorder your PATH."
    } | indent
    echo
    : $((warnings++))
  else
    printc green "OK"
    echo
  fi
else
  printc red "not found"
  echo
  { echo "The directorty \`$shims_dir' must be present in PATH for phpenv to work."
    echo "Please run \`phpenv init' and follow the instructions."
  } | indent
  echo
  : $((warnings++))
fi

# check for phpenv install support
echo -n "Checking \`phpenv' install' support: "
phpenv_installs="$({ ls "$PHPENV_ROOT"/plugins/*/bin/phpenv-install 2>/dev/null || true
                     which -a phpenv-install 2>/dev/null || true
                   } | uniq )"
num_installs="$(wc -l <<<"$phpenv_installs")"
if [ -z "$phpenv_installs" ]; then
  printc red "not found"
  echo
  { echo "Unless you plan to add PHP versions manually, you should install php-build."
    echo "Please refer to https://github.com/php-build/php-build#installation"
  }
  echo
  : $((warnings++))
elif [ "$num_installs" -eq 1 ]; then
  printc green "$phpenv_installs"
  if [[ $phpenv_installs == "$PHPENV_ROOT"/plugins/* ]]; then
    phpenv_install_cmd="${phpenv_installs##*/}"
    phpenv_install_version="$(phpenv "${phpenv_install_cmd#phpenv-}" --version || true)"
  else
    phpenv_install_version="$("$phpenv_installs" --version || true)"
  fi
  printf " (%s)\n" "$phpenv_install_version"
else
  printc yellow "multiple"
  echo
  { echo "You seem to have multiple \`phpenv-install' in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    echo "$phpenv_installs"
  } | indent
  echo
  : $((warnings++))
fi

# count installed php versions
echo -n "Counting installed PHP versions: "
num_phps="$(phpenv versions --bare | wc -l)"
if [ "$num_phps" -eq 0 ]; then
  printc yellow "none"
  echo
  echo "There aren't any PHP versions installed under \`$PHPENV_ROOT/versions'." | indent
  [ "$num_installs" -eq 0 ] || {
    latest_version="$(phpenv install -l 2>/dev/null | grep -vFe snapshot | tail -1)"
    [ -n "$latest_version" ] || latest_version="<version>"
    echo -n "You can install PHP versions like so: "
    printc bright "phpenv install $latest_version"
    echo
  } | indent
else
  printc green "$num_phps versions"
  echo
fi
